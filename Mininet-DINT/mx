#!/bin/bash

# Attach to a MiniNExT host and run a command
# (Extends existing script to provide support for PID namespaces)
# Credit to MiniNext: https://github.com/USC-NSL/miniNExT

# 检查是否提供了命令行参数。如果没有提供任何参数（至少需要一个主机名），
# 则打印脚本的使用方法并退出。否则，将第一个参数（主机名）存储在变量host中。
if [ -z $1 ]; then
  echo "usage: $0 host cmd [args...]"
  exit 1
else
  host=$1
fi

# 使用一系列的管道命令来查找与指定MiniNExT主机名称匹配的bash进程的PID。
# 这个命令排除了名称中包含mxexec的进程。
pid=`ps ax | grep "mininet:$host$" | grep bash | grep -v mxexec | awk '{print $1};'`

# 检查是否找到了多个匹配的PID。如果是，打印错误信息并退出。
if echo $pid | grep -q ' '; then
  echo "Error: found multiple mininet:$host processes"
  exit 2
fi

# 如果没有找到任何匹配的PID，表示未能定位到MiniNExT主机，打印错误信息并退出。
if [ "$pid" == "" ]; then
  echo "Could not find Mininet host $host"
  exit 3
fi

# 根据是否提供了除主机名外的其他命令行参数来构建要在MiniNExT主机上执行的命令。
# 如果没有提供其他参数，就打开一个交互式bash会话；否则，执行提供的命令。
if [ -z $2 ]; then
    cmd="bash -c 'cd `pwd`; bash'"
else
  shift
  cmd=$*
  cmd="bash -c 'cd `pwd`; $cmd'"
fi

# 检查是否存在与MiniNExT主机对应的cgroup目录，如果存在，构建一个cgroup选项字符串。
cgroup=/sys/fs/cgroup/cpu/$host
if [ -d "$cgroup" ]; then
  cg="-g $host"
fi

# 检查MiniNExT主机是否应该在chroot目录中运行。如果是，更新命令以在chroot环境中执行。
# Check whether host should be running in a chroot dir
rootdir="/var/run/mn/$host/root"
if [ -d $rootdir -a -x $rootdir/bin/bash ]; then
    cmd="'cd `pwd`; exec $cmd'"
    cmd="chroot $rootdir /bin/bash -c $cmd"
fi

# 构建最终的命令，使用mxexec工具以sudo权限在指定PID的上下文中执行命令。
然后使用eval执行这个命令。
cmd="exec sudo ./mxexec -a $pid -b $pid -k $pid $cg $cmd"
eval $cmd
